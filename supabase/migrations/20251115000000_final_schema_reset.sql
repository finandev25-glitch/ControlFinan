-- =============================================
-- RESET ESQUEMA COMPLETO
-- =============================================
-- Este script eliminará y reconstruirá todas las tablas principales de la aplicación.
-- ¡ADVERTENCIA! ESTO BORRARÁ TODOS LOS DATOS EN LAS TABLAS AFECTADAS.
-- =============================================

-- Desactivar RLS temporalmente para evitar problemas de permisos durante el borrado
ALTER TABLE public.user_profiles DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.family_members DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.families DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.cajas DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.budgets DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.scheduled_expenses DISABLE ROW LEVEL SECURITY;

-- Eliminar políticas existentes para evitar conflictos de dependencia
DROP POLICY IF EXISTS "Users can see profiles of their family members" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can insert their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Enable read access for family members" ON public.families;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.family_members;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.cajas;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.categories;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.transactions;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.budgets;
DROP POLICY IF EXISTS "Enable all access for family members" ON public.scheduled_expenses;

-- Eliminar el trigger y la función para recrearlos
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user;

-- Eliminar tablas en orden inverso de dependencia, usando CASCADE para forzar el borrado de dependencias
DROP TABLE IF EXISTS public.budgets CASCADE;
DROP TABLE IF EXISTS public.scheduled_expenses CASCADE;
DROP TABLE IF EXISTS public.transactions CASCADE;
DROP TABLE IF EXISTS public.categories CASCADE;
DROP TABLE IF EXISTS public.cajas CASCADE;
DROP TABLE IF EXISTS public.family_members CASCADE;
DROP TABLE IF EXISTS public.user_profiles CASCADE;
DROP TABLE IF EXISTS public.families CASCADE;

-- =============================================
-- RECONSTRUCCIÓN DEL ESQUEMA
-- =============================================

-- Tabla de Familias
CREATE TABLE public.families (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabla de Perfiles de Usuario
CREATE TABLE public.user_profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name TEXT,
    avatar_url TEXT,
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Tabla de Miembros de Familia (tabla de unión)
CREATE TABLE public.family_members (
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('Aportante Principal', 'Aportante', 'Dependiente')),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    PRIMARY KEY (user_id, family_id)
);

-- Tabla de Cajas (Efectivo, Cuentas, Tarjetas, etc.)
CREATE TABLE public.cajas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    member_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    type TEXT NOT NULL,
    name TEXT NOT NULL,
    bank TEXT,
    account_number TEXT,
    currency TEXT DEFAULT 'PEN',
    card_number TEXT,
    credit_line NUMERIC,
    closing_day INT,
    payment_due_date INT,
    loan_purpose TEXT,
    total_installments INT,
    paid_installments INT,
    payment_day INT,
    monthly_payment NUMERIC
);

-- Tabla de Categorías
CREATE TABLE public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    name TEXT NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('Ingreso', 'Gasto')),
    icon_name TEXT,
    UNIQUE(family_id, name, type)
);

-- Tabla de Transacciones
CREATE TABLE public.transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    member_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    caja_id BIGINT REFERENCES public.cajas(id) ON DELETE CASCADE NOT NULL,
    date TIMESTAMPTZ NOT NULL,
    description TEXT,
    amount NUMERIC NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('Ingreso', 'Gasto')),
    category TEXT NOT NULL,
    transfer_id UUID
);

-- Tabla de Presupuestos
CREATE TABLE public.budgets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    category TEXT NOT NULL,
    limit_amount NUMERIC NOT NULL,
    year INT NOT NULL,
    month INT NOT NULL,
    UNIQUE(family_id, category, year, month)
);

-- Tabla de Gastos Programados
CREATE TABLE public.scheduled_expenses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    family_id UUID REFERENCES public.families(id) ON DELETE CASCADE NOT NULL,
    description TEXT NOT NULL,
    amount NUMERIC NOT NULL,
    category TEXT NOT NULL,
    day_of_month INT NOT NULL,
    member_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    caja_id BIGINT REFERENCES public.cajas(id) ON DELETE CASCADE,
    confirmed_months TEXT[],
    is_automatic BOOLEAN DEFAULT false,
    is_credit_card_payment BOOLEAN DEFAULT false,
    credit_card_id BIGINT REFERENCES public.cajas(id) ON DELETE SET NULL
);

-- =============================================
-- FUNCIONES Y TRIGGERS
-- =============================================

-- Función para manejar nuevos usuarios
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  new_family_id UUID;
BEGIN
  -- Crear un perfil de usuario
  INSERT INTO public.user_profiles (id, full_name, avatar_url)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  
  -- Crear una nueva familia para el usuario
  INSERT INTO public.families (name)
  VALUES ((new.raw_user_meta_data->>'full_name') || '''s Family')
  RETURNING id INTO new_family_id;
  
  -- Asignar al usuario a la nueva familia como Aportante Principal
  INSERT INTO public.family_members (user_id, family_id, role)
  VALUES (new.id, new_family_id, 'Aportante Principal');
  
  -- Crear una caja de efectivo inicial para la familia
  INSERT INTO public.cajas (family_id, type, name)
  VALUES (new_family_id, 'Efectivo', 'Efectivo General');
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para ejecutar la función en nuevos registros de auth.users
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- =============================================
-- SEGURIDAD (RLS)
-- =============================================

-- Habilitar RLS en todas las tablas
ALTER TABLE public.families ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.family_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cajas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.budgets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scheduled_expenses ENABLE ROW LEVEL SECURITY;

-- Políticas de Seguridad
CREATE POLICY "Enable read access for family members" ON public.families
FOR SELECT USING (id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Users can insert their own profile" ON public.user_profiles
FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile" ON public.user_profiles
FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can see profiles of their family members" ON public.user_profiles
FOR SELECT USING (id IN (
    SELECT user_id FROM public.family_members WHERE family_id IN (
        SELECT family_id FROM public.family_members WHERE user_id = auth.uid()
    )
));

CREATE POLICY "Enable all access for family members" ON public.family_members
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Enable all access for family members" ON public.cajas
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Enable all access for family members" ON public.categories
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Enable all access for family members" ON public.transactions
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Enable all access for family members" ON public.budgets
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

CREATE POLICY "Enable all access for family members" ON public.scheduled_expenses
FOR ALL USING (family_id IN (SELECT family_id FROM public.family_members WHERE user_id = auth.uid()));

-- Vista segura para miembros de familia (opcional pero recomendado)
CREATE OR REPLACE VIEW public.family_members_view AS
SELECT
    fm.user_id,
    fm.family_id,
    fm.role,
    p.full_name,
    p.avatar_url
FROM
    public.family_members fm
LEFT JOIN
    public.user_profiles p ON fm.user_id = p.id;
